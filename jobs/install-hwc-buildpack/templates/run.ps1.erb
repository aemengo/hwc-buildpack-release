$ErrorActionPreference = "Stop";
trap { $host.SetShouldExit(1) }

function runCf {
  param(
    [string[]]$command
  )

  cf @command
  if ($LASTEXITCODE -ne 0) {
    Exit $LASTEXITCODE
  }
}

$env:Path += ";C:\var\vcap\packages\cf-cli\bin"
$env:CF_USERNAME="<%= p("cf.admin_username") %>"
$env:CF_PASSWORD="<%= p("cf.admin_password") %>"
$env:API_URL="<%= p("cf.api_url") %>"
$env:SKIP_SSL_VALIDATION="<%= p("ssl.skip_cert_verify") %>"

if ( $env:SKIP_SSL_VALIDATION -eq "true" ) {
  runCf "api", "$env:API_URL", "--skip-ssl-validation"
} else {
  runCf "api", "$env:API_URL"
}

runCf "auth", "$env:CF_USERNAME", "$env:CF_PASSWORD"

$hwcBuildpack = Get-Item("C:\var\vcap\packages\hwc-buildpack-windows\hwc*.zip")

$hasHwcBuildpack = $false
$hwcUnlocked = $false

$binaryBuildpack = Get-Item("C:\var\vcap\packages\binary-buildpack-windows\binary*.zip")

$hasBinaryBuildpack = $false
$binaryUnlocked = $false

$option = [System.StringSplitOptions]::RemoveEmptyEntries
$buildpacks = (runCf "buildpacks").Split("\n", $option)

foreach ($bp in $buildpacks) {
  $bpName, $bpPos, $bpEnabled, $bpLocked, $ignore = $bp.Split(" ", $option)

  if ($bpName -eq "hwc_buildpack") {
    $hasHwcBuildpack = $true
    $hwcUnlocked = ($bpLocked -eq "false")
  }

  if ($bpName -eq "binary_buildpack") {
    $hasBinaryBuildpack = $true
    $binaryUnlocked = ($bpLocked -eq "false")
  }
}

if (-not $hasHwcBuildpack) {
  runCf "create-buildpack", "hwc_buildpack", "$hwcBuildpack", "1", "--enable"
} elseif ($hwcUnlocked) {
  runCf "update-buildpack", "hwc_buildpack", "-p", "$hwcBuildpack"
} else {
  Write-Host "HWC Buildpack is locked, skipping update"
}

if (-not $hasBinaryBuildpack) {
  runCf "create-buildpack", "binary_buildpack", "$binaryBuildpack", "1", "--enable"
} elseif ($binaryUnlocked) {
  runCf "update-buildpack", "binary_buildpack", "-p", "$binaryBuildpack"
} else {
  Write-Host "Binary Buildpack is locked, skipping update"
}
